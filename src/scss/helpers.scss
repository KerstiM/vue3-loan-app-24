@import '@/scss/variables';
@import '@/scss/colors';

// Width & height helpers
.w-auto {
  width: auto !important;
}

.w-100 {
  width: 100% !important;
}

.max-w-100 {
  max-width: 100% !important;
}

.h-100 {
  height: 100% !important;
}

.min-h-100 {
  min-height: 100% !important;
}

.vh-100 {
  height: 100vh !important;
}

.min-vh-100 {
  min-height: 100vh !important;
}

// Generate utility classes for paddings and margins
$opacityamounts: (0, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 80, 100);
$spaceamounts: (0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 56, 60, 80, 100, 200);
$sides: (
  a: all,
  x: sides-x,
  y: sides-y,
  t: top,
  b: bottom,
  l: left,
  r: right,
);

// Renders helper classes for properties with four sides
@mixin renderSidedClass($sidePrefix, $class, $propType, $property, $unit) {
  @if $sidePrefix == x {
    .#{$class} {
      #{$propType}-left: $unit !important;
      #{$propType}-right: $unit !important;
    }
  } @else if $sidePrefix == y {
    .#{$class} {
      #{$propType}-top: $unit !important;
      #{$propType}-bottom: $unit !important;
    }
  } @else {
    .#{$class} {
      #{$property}: $unit !important;
    }
  }
}

@mixin marginPaddingHelpers($breakpointNameDashed) {
  @each $propType, $propAbbrev in (margin: m, padding: p) {
    @each $sidePrefix, $side in $sides {
      @each $space in $spaceamounts {
        $sidePrefixDashed: if($side == all, '', -#{$sidePrefix});
        $class: #{$propAbbrev}#{$sidePrefixDashed}#{$breakpointNameDashed}-#{$space};
        $property: if($side == all, $propType, #{$propType}-#{$side});
        $unit: if($space == 0, $space, #{$space}px);

        @include renderSidedClass($sidePrefix, $class, $propType, $property, $unit);
      }
    }
  }
}

// Opacity
@each $space in $opacityamounts {
  @if $space != 0 {
    $unit: percentage($space / 100);

    .opacity-#{$space} {
      opacity: $unit !important;
    }
  } @else {
    .opacity-#{$space} {
      opacity: $space !important;
    }
  }
}

// Margin-specific utils
.m-a { margin: auto !important; }
.m-l-a { margin-left: auto !important; }
.m-r-a { margin-right: auto !important; }
.m-t-a { margin-top: auto !important; }
.m-b-a { margin-bottom: auto !important; }

.m-x-a {
  margin-right: auto !important;
  margin-left: auto !important;
}

.m-y-a {
  margin-top: auto !important;
  margin-bottom: auto !important;
}

// Create classes to break out of wrapper gutters via negative margins
@mixin negativeMarginHelpers($breakpointNameDashed) {
  @each $space in $spaceamounts {
    @if $space != 0 {
      $unit: -#{$space}px;

      @each $sidePrefix, $side in $sides {
        $sidePrefixDashed: if($side == all, '', -#{$sidePrefix});
        $class: nm#{$sidePrefixDashed}#{$breakpointNameDashed}-#{$space};
        $propType: margin;
        $property: if($side == all, $propType, #{$propType}-#{$side});

        @include renderSidedClass($sidePrefix, $class, $propType, $property, $unit);
      }
    }
  }
}

// Create responsive helpers for all breakpoints
@each $breakpointName, $breakpointValue in $grid-breakpoints {
  $breakpointNameDashed: if($breakpointName == xs, '', -#{$breakpointName});

  @if $breakpointName == xs {
    @include marginPaddingHelpers($breakpointNameDashed);
    @include negativeMarginHelpers($breakpointNameDashed);
  } @else {
    @media (min-width: #{$breakpointValue}) {
      @include marginPaddingHelpers($breakpointNameDashed);
      @include negativeMarginHelpers($breakpointNameDashed);
    }
  }
}

// Border-radius
@each $radiusName, $radiusVal in $border-radiuses {
  .border-radius-#{$radiusName} {
    border-radius: $radiusVal !important;
  }
}

// Background-color
@each $cName, $cVal in $colors {
  .bg-#{$cName} {
    background-color: $cVal !important;
  }
}

.relative { position: relative !important; }

// Margin-specific utils
.m-a { margin: auto !important; }
.m-l-a { margin-left: auto !important; }
.m-r-a { margin-right: auto !important; }
.m-t-a { margin-top: auto !important; }
.m-b-a { margin-bottom: auto !important; }

.m-x-a {
  margin-right: auto !important;
  margin-left: auto !important;
}

.m-y-a {
  margin-top: auto !important;
  margin-bottom: auto !important;
}